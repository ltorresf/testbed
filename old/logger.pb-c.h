/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: logger.proto */

#ifndef PROTOBUF_C_logger_2eproto__INCLUDED
#define PROTOBUF_C_logger_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Logger Logger;
typedef struct _Frameparms Frameparms;


/* --- enums --- */


/* --- messages --- */

struct  _Logger
{
  ProtobufCMessage base;
  Frameparms *frame_param;
};
#define LOGGER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&logger__descriptor) \
    , NULL }


struct  _Frameparms
{
  ProtobufCMessage base;
  uint32_t n_rb_dl;
  uint32_t n_rb_ul;
};
#define FRAMEPARMS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&frameparms__descriptor) \
    , 0, 0 }


/* Logger methods */
void   logger__init
                     (Logger         *message);
size_t logger__get_packed_size
                     (const Logger   *message);
size_t logger__pack
                     (const Logger   *message,
                      uint8_t             *out);
size_t logger__pack_to_buffer
                     (const Logger   *message,
                      ProtobufCBuffer     *buffer);
Logger *
       logger__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   logger__free_unpacked
                     (Logger *message,
                      ProtobufCAllocator *allocator);
/* Frameparms methods */
void   frameparms__init
                     (Frameparms         *message);
size_t frameparms__get_packed_size
                     (const Frameparms   *message);
size_t frameparms__pack
                     (const Frameparms   *message,
                      uint8_t             *out);
size_t frameparms__pack_to_buffer
                     (const Frameparms   *message,
                      ProtobufCBuffer     *buffer);
Frameparms *
       frameparms__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   frameparms__free_unpacked
                     (Frameparms *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Logger_Closure)
                 (const Logger *message,
                  void *closure_data);
typedef void (*Frameparms_Closure)
                 (const Frameparms *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor logger__descriptor;
extern const ProtobufCMessageDescriptor frameparms__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_logger_2eproto__INCLUDED */
